.data
     mensaje: .asciiz "Suma: 1\nResta: 2\nMultiplicacion: 3\nDivision: 4\n\nIngresa la operación: "
     solucion: .asciiz "El resultado es: "
     coma: .asciiz ","
     menos: .asciiz "-"

.text
# convertir numero 1   
primer_numero:
    # Se añade 4 al contenido de $t0 y se guarda en $t0, se usa como contador
    addi $t0, $t0, 4
    # Se resta 4 al contenido de $t0 y se guarda en $t7 
    subi $t7, $t0, 4
    # Si en $t7 hay un 28 se salta a guardar 1 para guardar el primer numero
    beq $t7, 28, guardar1
    # Se carga en $t1 el contenido del data segment 0x100100a0($t7)
    lw $t1, 0x100100a0($t7)
    #Si en $t7 hay un 0 se salta a diez0 para calcular el el valor en $t1 * 10**0
    beq $t7, 0, diez0 
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez1 para calcular el el valor en $t1 * 10**1
    beq $t7, 0, diez1 
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez2 para calcular el el valor en $t1 * 10**2
    beq $t7, 0, diez2 
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez3 para calcular el el valor en $t1 * 10**3
    beq $t7, 0, diez3 
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez4 para calcular el el valor en $t1 * 10**4
    beq $t7, 0, diez4 
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez5 para calcular el el valor en $t1 * 10**5
    beq $t7, 0, diez5 
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez6 para calcular el el valor en $t1 * 10**6
    beq $t7, 0, diez6 
    
diez0:
    # Guarda en $t2 el contenido del data segment 0x100100a0(0)
    add $t2, $t1, $zero
    # Salta a primer_numero
    j primer_numero
       
diez1: 
    # Si en $t1 hay un 0 salta a primer_numero
    beq $t1, 0, primer_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(4)*10
    addi $t2, $t2, 10
    # Se resta 1 a $t1, ya que se usa como como contador hasta que sea 0
    subi $t1, $t1, 1
    # Vuelve a diez1
    j diez1

diez2:
    # Si en $t1 hay un 0 salta a primer_numero
    beq $t1, 0, primer_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(8)*100
    addi $t2, $t2, 100
    # Se resta 1 a $t1, ya que se usa como como contador hasta que sea 0
    subi $t1, $t1, 1
    # Vuelve a diez2
    j diez2

diez3:
    # Si en $t1 hay un 0 salta a primer_numero
    beq $t1, 0, primer_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del del data segment 0x100100a0(12)*1.000
    addi $t2, $t2, 1000
    # Se resta 1 a $t1, ya que se usa como como contador hasta que sea 0
    subi $t1, $t1, 1
    # Vuelve a diez3
    j diez3

diez4:
    # Si en $t1 hay un 0 salta a primer_numero
    beq $t1, 0, primer_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(16)*10.000
    addi $t2, $t2, 10000
    # Se resta 1 a $t1, ya que se usa como como contador hasta que sea 0
    subi $t1, $t1, 1
    # Vuelve a diez4
    j diez4

diez5:
    # Si en $t1 hay un 0 salta a primer_numero
    beq $t1, 0, primer_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(20)*100.000
    addi $t2, $t2, 100000
    # Se resta 1 a $t1, ya que se usa como como contador hasta que sea 0
    subi $t1, $t1, 1
    # Vuelve a diez5
    j diez5
    
diez6:
    # Si en $t1 hay un 0 salta a primer_numero
    beq $t1, 0, primer_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(24)*1.000.000
    addi $t2, $t2, 1000000
    # Se resta 1 a $t1, ya que se usa como como contador hasta que sea 0
    subi $t1, $t1, 1
    # Vuelve a diez6
    j diez6

 
guardar1:
    # Se guarda en $t3 el primer numero
    add $t3, $t2, $zero
    # Se resetea $t2
    add $t2, $zero, $zero
    # Se resetea $t0
    add $t0, $zero, $zero 
    #Se salta a numero 2
    j segundo_numero
    
segundo_numero:
    # Se añade 4 al contenido de $t0 y se guarda en $t0, se usa como contador
    addi $t0, $t0, 4
    # Se resta 4 al contenido de $t0 y se guarda en $t7     
    subi $t7, $t0, 4
    # Si en $t7 hay un 28 se salta a guardar 1 para guardar el primer numero
    beq $t7, 28, principal
    # Se carga en $t1 el contenido del data segment 0x100100a0($t7)
    lw $t1, 0x100100c0($t7)
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 1
    beq $t7, 0, sdiez0
    # Se resta 4 al contenido de $t7 y se guarda  en $t7 
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 10
    beq $t7, 0, sdiez1
    # Se resta 4 al contenido de $t7 y se guarda  en $t7 
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 100
    beq $t7, 0, sdiez2
    # Se resta 4 al contenido de $t7 y se guarda  en $t7 
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 1.000
    beq $t7, 0, sdiez3
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 10.000
    beq $t7, 0, sdiez4
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 100.000
    beq $t7, 0, sdiez5
    # Se resta 4 al contenido de $t7 y se guarda  en $t7
    subi $t7, $t7, 4
    #Si en $t7 hay un 0 se salta a diez0 para calcular el valor en $t1 * 1.000.000
    beq $t7, 0, sdiez6
       
sdiez0:
    # Guarda en $t2 el contenido del data segment 0x100100a0(0)*1
    add $t2, $t1, $zero
    # Vuelve a segundo_numero
    j segundo_numero
    
      
sdiez1: 
    # Si en $t1 hay un 0 vuelve a segundo_numero
    beq $t1, 0, segundo_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(4)*10
    addi $t2, $t2, 10
    # Resta un 1 al contenido de $t1 y se guarda en $t1
    subi $t1, $t1, 1
    # Vuelve a sdiez1 a modo de loop
    j sdiez1

sdiez2:
    # Si en $t1 hay un 0 vuelve a segundo_numero
    beq $t1, 0, segundo_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(8)*100
    addi $t2, $t2, 100
    # Resta un 1 al contenido de $t1 y se guarda en $t1
    subi $t1, $t1, 1
    # Vuelve a sdiez2 a modo de loop
    j sdiez2

sdiez3:
    # Si en $t1 hay un 0 vuelve a segundo_numero
    beq $t1, 0, segundo_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(12)*1.000
    addi $t2, $t2, 1000
    # Resta un 1 al contenido de $t1 y se guarda en $t1
    subi $t1, $t1, 1
    # Vuelve a sdiez3 a modo de loop
    j sdiez3

sdiez4:
    # Si en $t1 hay un 0 vuelve a segundo_numero
    beq $t1, 0, segundo_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(16)*10.000
    addi $t2, $t2, 10000
    # Resta un 1 al contenido de $t1 y se guarda en $t1
    subi $t1, $t1, 1
    # Vuelve a sdiez4 a modo de loop
    j sdiez4

sdiez5:
    # Si en $t1 hay un 0 vuelve a segundo_numero
    beq $t1, 0, segundo_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(20)*100.000
    addi $t2, $t2, 100000
    # Resta un 1 al contenido de $t1 y se guarda en $t1
    subi $t1, $t1, 1
    # Vuelve a sdiez5 a modo de loop
    j sdiez5    
 
sdiez6:
    # Si en $t1 hay un 0 vuelve a segundo_numero
    beq $t1, 0, segundo_numero
    # Guarda en $t2 el contenido de $t2 + el contenido del data segment 0x100100a0(24)*1.000.000
    addi $t2, $t2, 1000000
    # Resta un 1 al contenido de $t1 y se guarda en $t1
    subi $t1, $t1, 1
    # Vuelve a sdiez6 a modo de loop
    j sdiez6
    
signos_sr:
    # Si en $s1 hay un 1 significa que el primer numero es negativo y se salta a negativo 1 para transformarlo
    beq $s1, 1, negativo1
    # Si en $s2 hay un 1 significa que el segundo numero es negativo y se salta a negativo 2 para transformarlo
    beq $s2, 1, negativo2
    # Sino se regresa
    jr $ra
    negativo1:
        # Se resta a 0 el primer numero y se guarda donde mismo para usarlo
        sub $t3, $zero, $t3
        # Si en $s2 hay un 1 significa que el segundo numero es negativo y se salta a negativo 2 para transformarlo
        beq $s2, 1, negativo2
        # Sino se regresa
        jr $ra
    negativo2:
        # Se resta a 0 el primer numero y se guarda donde mismo para usarlo
        sub $t2, $zero, $t2
        # Se regresa
        jr $ra

principal:
    # Se guarda un 0 en $to
    add $t0, $zero, $zero    
    # Se imprime el mensaje con las operaciones
    li $v0, 4
    la $a0, mensaje
    syscall
    # Se guarda la operacion
    li $v0, 5
    syscall
    # Se guarda lo ingresado por consola en %t0
    move $t0, $v0
    # Se establece un 0 en $a0
    add $a0, $zero, $zero
    # Se establece un 0 en $t7
    add $t7, $zero, $zero
    #Salta a la operacion correspondiente
    beq $t0, 1, suma
    beq $t0, 2, resta
    beq $t0, 3, multiplicacion
    beq $t0, 4, division_entera
      
suma:
    # Se salta a signos_sr para ponerle los signos a los operando si la opercaion escogida es suma
    jal signos_sr
    # Se suma el primer numero que está en $t3 con el segundo número que está en $t2 
    add $a0, $t3, $t2
    # Si el resultado es negativo se guarda un 1 en $s3
    slt $s3, $a0, $zero 
    # Se va a imprimir el resultado
    j resultado
  
resta:
    # Se salta a signos_sr para ponerle los signos a los operando si la opercaion escogida es resta
    jal signos_sr
    # Se resta el primer numero que está en $t3 con el segundo número que está en $t2 
    sub $a0, $t3, $t2
    # Si el resultado es negativo se guarda un 1 en $s3
    slt $s3, $a0, $zero 
    # Se va a imprimir el resultado
    j resultado

multiplicacion:
    #Si en $t3 hay un 0 se salta a resultado para imprimir el resultado
    beq $t3, 0, signo_m
    # Se añade en $a0 el contenido de $ao + el contenido de $t2
    add $a0, $t2, $a0
    # Se resta 1 al primer numero que está en $t3
    subi $t3, $t3, 1 
    # Se vuelve a multiplicación en loop
    j multiplicacion

division_entera:
    # Se resta al primer numero el segundo y se guarda en $t4
    sub $t4, $t3, $t2
    # Si la resta es menor a 0 se carga un 1 en $t0
    slt $t0, $t4, $zero
    # Si en $t0 hay un 1 se salta a aux1
    beq $t0, 1, aux1
    # Se resta al primer numero el segundo y se guarda en $t3
    sub $t3, $t3, $t2
    # Sino se suma un 1 en $a0
    addi $a0, $a0, 1
    # Si la resta es 0 se salta a imprimir el resultado
    beq $t3, 0, signo_d
    # Se carga un 0 en $a1 y $t6
    add $a1, $zero, $zero
    add $t6, $zero, $zero
    # Sino se vuelve a division entera como loop
    j division_entera
    
division_decimal_1:
    # Se carga un 0 en $t7
    addi $t7,$zero, 0 
    # Se resta al primer numero el segundo y se guarda en $t4
    sub $t4, $t3, $t2
    # Si la resta es menor a 0 se carga un 1 en $t0
    slt  $t0, $t4, $zero
    # Si en $t0 hay un 1 se salta a aux2
    beq  $t0, 1, aux2
    # Se resta al primer numero el segundo y se guarda en $t3
    sub $t3, $t3, $t2
    # Sino se suma un 1 en $a1
    addi $a1, $a1, 1
    # Si la resta es 0 se salta a imprimir el resultado
    beq $t3, 0, signo_d
    # Se carga un 0 en $a2
    add $a2, $zero, $zero
    # Sino se vuelve a division decimal 1 como loop
    j division_decimal_1
    
division_decimal_2:
    # Se carga un 0 en $t7
    addi $t7,$zero, 0 
    # Se resta al primer numero el segundo y se guarda en $t4
    sub $t4, $t3, $t2
    # Si la resta es menor a 0 se carga un 1 en $t0
    slt  $t0, $t4, $zero
    # Si en $t0 hay un 1 se salta a aux2
    beq  $t0, 1, aux2
    # Se resta al primer numero el segundo y se guarda en $t3
    sub $t3, $t3, $t2
    # Sino se suma un 1 en $a2
    addi $a2, $a2, 1
    # Si la resta es 0 se salta a imprimir el resultado
    beq $t3, 0, signo_d
    # Se carga un 0 en $a3
    add $a3, $zero, $zero
    # Sino se vuelve a division decimal 2 como loop
    j division_decimal_2
    
division_decimal_3:
    # Se carga un 0 en $t7
    addi $t7,$zero, 0 
    # Se resta al primer numero el segundo y se guarda en $t4
    sub $t4, $t3, $t2
    # Si la resta es menor a 0 se carga un 1 en $t0 
    slt  $t0, $t4, $zero
    # Si en $t0 hay un 1 se salta a aux2
    beq  $t0, 1, aux2
    # Se resta al primer numero el segundo y se guarda en $t3
    sub $t3, $t3, $t2
    # Sino se suma un 1 en $a3
    addi $a3, $a3, 1
    # Si la resta es 0 se salta a imprimir el resultado
    beq $t3, 0, signo_d
    # Se carga un 0 en $t5
    add $t5, $zero, $zero
    # Sino se vuelve a division decimal 3 como loop
    j division_decimal_3
    
division_decimal_4:
    # Se carga un 0 en $t7
    addi $t7,$zero, 0 
    # Se resta al primer numero el segundo y se guarda en $t4
    sub $t4, $t3, $t2
    # Si en $t0 hay un 1 se salta a aux2
    slt  $t0, $t4, $zero
    # Se resta al primer numero el segundo y se guarda en $t3
    beq  $t0, 1, aux2
    # Si en $t0 hay un 1 se salta a aux2
    sub $t3, $t3, $t2
     # Si no se suma un 1 en $a3
    addi $t5, $t5, 1
    # Si la resta es 0 se salta a imprimir el resultado
    beq $t3, 0, signo_d
    # Sino se vuelve a division decimal 3 como loop
    j division_decimal_4
aux1:
    
    add $t4, $zero, $zero
    # Se salta de division decimal 1 para calcular el primer decimal
    j division_decimal_1
    
aux2: 
    # Se añade 1 en $t6
    addi $t6, $t6, 1
    # Se carga un 0 en $t4
    add $t4, $zero, $zero
    # Se copia el contenido de $t3 en $t4
    add $t4, $t3, $zero
    # Sesalta a multi10
    j multi10
    
aux3:
    # Si en $t6 hay un 1 se salta a divison decimal 1 para calcular el primer decimal
    beq $t6, 1, division_decimal_1
    # Si en $t6 hay un 2 se salta a divison decimal 2 para calcular el segundo decimal
    beq $t6, 2, division_decimal_2
    # Si en $t6 hay un 3 se salta a divison decimal 3 para calcular el tercer decimal
    beq $t6, 3, division_decimal_3
    # Si en $t6 hay un 4 se salta a divison decimal 4 para calcular el cuarto decimal
    beq $t6, 4, division_decimal_4
    # Si en $t6 hay un 5 se salta a resultado division para mostrar el resultado de la division
    beq $t6, 5, resultado_division
    
multi10:
    # Si en $t7 hay un 9 se salta a aux3
    beq $t7, 9, aux3
    # Se añade en $t3 el mismo numro, hasta 10 veces
    add $t3, $t3, $t4
    # Se añade 1 a al contenido $t7
    addi $t7, $t7, 1 
    # Se salta a multi 10 para hacer un loop
    j multi10
signo_m:
    # Si el contenido de $s1 es distinto a al de $s2 se guarda un uno en $s3
    sne $s3, $s1, $s2
    # Y se salta a imprimir el signo menos
    beq $s3, 1, menos_m
    # Sino dse imprime normla el resultado
    j resultado
    
signo_d:
    # Si el contenido de $s1 es distinto a al de $s2 se guarda un uno en $s3
    sne $s3, $s1, $s2
    # Y se salta a imprimir el signo menos
    beq $s3, 1, menos_d
    # Sino dse imprime normla el resultado
    j resultado_division
    
menos_m:
    # Se pone negativo el contenido de $a0
    sub $a0, $zero, $a0
    # Se imprime el resultado
    j resultado
menos_d:
    # Se pone negativo el contenido de $a0
    sub $a0, $zero, $a0
    # Se imprime el resultado
    j resultado_division
    
resultado:
    # Se guarda la parte entera en $t7
    move $t7, $a0
    # Se imprime el string resultado
    li $v0, 4
    la $a0, solucion
    syscall
    # Se mueve la parte entera a %$t0
    move $a0, $t7
    li $v0, 1
    syscall
    # Se mueve el resultado de $a0 a $t0
    move $t0, $a0
    # Se resetea $t7
    add $t7, $zero, $zero
    # Se guarda un 36 en $t6, para usarlo para accedera a una posicion en especifico de un data segment
    addi $t6, $zero, 36
    # Si el resultado es negativo se pone positivo para guardarlo
    bltz $t0, hacer_pos
    # Se salta a guardar el resultado
    j guardar_resultado
    
resultado_division:
    # Contador para guardar los decimales
    addi $t6, $zero, 12
    # Se guarda la parte entera en $t7
    move $t7, $a0
    # Se imprime el string resultado
    li $v0, 4
    la $a0, solucion
    syscall
    # Se mueve la parte entera a $t0
    move $a0, $t7 
    # Se imprime la parte entera
    li $v0, 1
    syscall 
    # Se mueve la parte entera a $t0
    move $t0, $a0 
    # Se imprime la coma
    li $v0, 4
    la $a0, coma
    syscall
    # Se guarda el primer decimal
    sw $a1, 0x10010100($t6)
    # Se mueve el primer decimal a $a0
    move $a0, $a1
    # Se imprime el primer decimal
    li $v0, 1
    syscall 
    # Se mueve el primer decimal a $t1
    move $t1, $a0
    # Se guarda el segundo decimal
    subi $t6, $t6, 4
    sw $a2, 0x10010100($t6)
    # Se mueve el segundo decimal a $a0
    move $a0, $a2
    # Se imprime el segundo decimal
    li $v0, 1
    syscall
    # Se mueve el segundo decimal a $t2
    move $t2, $a0
    # Se guarda el tercer decimal
    subi $t6, $t6, 4
    sw $a3, 0x10010100($t6)
    # Se mueve el tercer decimal a $a0
    move $a0, $a3
    # Se imprime el tercer decimal
    li $v0, 1
    syscall
    # Se mueve el tercer decimal a $t3
    move $t3, $a0
    # Se guarda el cuarto decimal
    subi $t6, $t6, 4
    sw $t5, 0x10010100($t6)
    # Se mueve el tercer decimal a $a0
    move $a0, $t5
    # Se imprime el cuarto decimal
    li $v0, 1
    syscall
    # Se mueve el tercer decimal a %$t3
    move $t4, $a0
    # Se resetea $t7
    add $t7, $zero, $zero
    # Se guarda un 36 en $t6, para usarlo para accedera a una posicion en especifico de un data segment
    addi $t6, $zero, 36
    # Si el resultado es negativo se pone positivo para guardarlo
    bltz $t0, hacer_pos
    # Se salta a guardar el resultado
    j guardar_resultado
hacer_pos:
    # Se hace positivo el resultado
    sub $t0, $zero, $t0
    # Se salta a guardar resultado
    j guardar_resultado
guardar_resultado:
    # Se añade 1 al contenido de $t7 y se guarda en $t7
    addi $t7, $t7, 1
    # Se resta 4 al contenido de $t6 y se guarda en $t6
    subi $t6, $t6, 4
    # Para evitar que modifique el valor en 0x10010100(0)
    beq $t7,1, guardar_digito7
    # Se guarda el contenido de $t1 en el data segment($t6)
    sw $t1, 0x100100e0($t6) 
    # Se resetea el contenido de $t1
    add $t1, $zero, $zero
    # Dependiendo el valor en $t7 se salta a cada etiqueta para calcular que valor se guarda en el data segment correspondiente
    beq $t7,2, guardar_digito6
    beq $t7,3, guardar_digito5
    beq $t7,4, guardar_digito4
    beq $t7,5, guardar_digito3
    beq $t7,6, guardar_digito2
    beq $t7,7, guardar_digito1
    beq $t7,8, guardar_digito0
    # Se termina el programa
    j fin


guardar_digito7:
   #Se guarda en $t4 el resultado - 10.000.000
   subi $t4, $t0, 10000000
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 10.000.000
   subi $t0, $t0, 10000000
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 10.000.000 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 10.000.000 se vuelve a guardar_resultado
   blt $t4, 10000000, guardar_resultado
   # Sino, se vuelve a guardar_digito7 a modo de loop
   j guardar_digito7 
   
guardar_digito6:
   #Se guarda en $t4 el resultado - 1.000.000
   subi $t4, $t0, 1000000
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 1.000.000
   subi $t0, $t0, 1000000
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 1.000.000 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 1.000.000 se vuelve a guardar_resultado
   blt $t4, 1000000, guardar_resultado
   # Sino, se vuelve a guardar_digito6 a modo de loop
   j guardar_digito6 
guardar_digito5:
   #Se guarda en $t4 el resultado - 100.000
   subi $t4, $t0, 100000
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 100.000
   subi $t0, $t0, 100000
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 100.000 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 100.000 se vuelve a guardar_resultado
   blt $t4, 100000, guardar_resultado
   # Sino, se vuelve a guardar_digito5 a modo de loop
   j guardar_digito5
guardar_digito4:
   #Se guarda en $t4 el resultado - 10.000
   subi $t4, $t0, 10000
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 10.000
   subi $t0, $t0, 10000
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 10.000 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 10.000 se vuelve a guardar_resultado
   blt $t4, 10000, guardar_resultado
   # Sino, se vuelve a guardar_digito4 a modo de loop
   j guardar_digito4
guardar_digito3:
   #Se guarda en $t4 el resultado - 1.000
   subi $t4, $t0, 1000
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 1.000
   subi $t0, $t0, 1000
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 1.000 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 1.000 se vuelve a guardar_resultado
   blt $t4, 1000, guardar_resultado
   # Sino, se vuelve a guardar_digito3 a modo de loop
   j guardar_digito3
guardar_digito2:
   #Se guarda en $t4 el resultado - 100
   subi $t4, $t0, 100
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 100
   subi $t0, $t0, 100
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 100 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 100 se vuelve a guardar_resultado
   blt $t4, 100, guardar_resultado
   # Sino, se vuelve a guardar_digito2 a modo de loop
   j guardar_digito2
guardar_digito1:
   #Se guarda en $t4 el resultado - 10
   subi $t4, $t0, 10
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 10
   subi $t0, $t0, 10
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 10 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es menor a 10 se vuelve a guardar_resultado
   blt $t4, 10, guardar_resultado
   # Sino, se vuelve a guardar_digito1 a modo de loop
   j guardar_digito1
guardar_digito0:
   #Se guarda en $t4 el resultado - 1
   subi $t4, $t0, 1
   # Si la resta es menor a 0 se regresa a guardar_resultado
   bltz $t4, guardar_resultado
   # Sino, se actualiza el resultado - 1
   subi $t0, $t0, 1
   # Se guarda en $t1 el contenido de $t1 + 1, se usa para contar cuantas veces cabe 1 en el resultado
   addi $t1, $t1, 1
   # Si el nuevo valor del resultado es igual a 0 se vuelve a guardar_resultado
   beqz $t4, guardar_resultado
   # Sino, se vuelve a guardar_digito0 a modo de loop
   j guardar_digito0

fin:


   

